<section class="form-flame">
  <%= form_with(model: toilet) do |form| %>
    <% if toilet.errors.any? %>
      <div id="error_explanation">
        <h2><%= pluralize(toilet.errors.count, "error") %> prohibited this toilet from being saved:</h2>
        <ul>
          <% toilet.errors.each do |error| %>
            <li><%= error.full_message %></li>
          <% end %>
        </ul>
      </div>
    <% end %>
    <div>
      <%= form.label :toilet_name, :class => 'required' %><br>
      <%= form.text_field :toilet_name, :class => 'form-control' %>
    </div>
    <label class="required">場所の指定</label>
    <br>
    <i>※マップ上をクリックしてピンを置くことで場所が指定されます</i>
    <br>
    <input
      id="pac-input"
      class="controls"
      type="text"
      placeholder="場所を検索"
    />
    <div id="map"></div>
    <div class="form-flame men">
      <p class="info-label men">◆ 男性用トイレの情報 ◆</p>
      <hr class="men">
      <div>
        <%= form.label :m_urinal %>
        <%= form.number_field :m_urinal, :in => 0..30, :class => 'form-control number' %>
      </div>
      <div>
        <%= form.label :room %>
        <%= form.number_field :m_room, :in => 0..30, :class => 'form-control number' %>
      </div>
      <div>
        <%= form.label :washlet %>
        <%= form.check_box :m_washlet %>
      </div>
    </div>
    <div class="form-flame women">
      <p class="info-label women">◆ 女性用トイレの情報 ◆</p>
      <hr class="women">
      <div>
        <%= form.label :room %>
        <%= form.number_field :w_room, :in => 0..30, :class => 'form-control number' %>
      </div>
      <div>
        <%= form.label :washlet %>
        <%= form.check_box :w_washlet %>
      </div>
    </div>
    <div>
      <%= form.label :multipurpose %>
      <%= form.check_box :multipurpose %>
    </div>
    <div>
      <%= form.label :possible_time %><br>
      <%= form.time_select :open_time, {include_blank: true, start_hour: 0, end_hour: 24, minute_step: 10}, :class => 'form-control number' %>
      ー
      <%= form.time_select :close_time, {include_blank: true, start_hour: 0, end_hour: 24, minute_step: 10}, :class => 'form-control number' %>
    </div>
    <div>
      <%= form.label :remark %><br>
      <%= form.text_area :remark, maxlength: "80", :class => 'form-control' %>
    </div>
    <div>
      <%= form.hidden_field :latitude, {id: "map_lat"} %>
      <%= form.hidden_field :longtitude, {id: "map_lng"} %>
      <%= form.hidden_field :user_id, value:current_user.id %>
    </div>
    <p class="page-control center">
      <%= form.submit '登録する', :class => 'btn-control green' %>
    </p>
  <% end %>
</section>

<!-- 以下、GoogleMAP API関連 -->
<style>
#map {
  height: 305px;
  max-width: 540px;
  margin: 20px auto;
  border-radius: 0.5rem;
  border: 3px solid #636363;
}

#pac-input {
  height: 30px;
  font-size: 1.1rem;
  text-align: center;
  border: 3px solid #087241;
}
</style>
<script>
function initAutocomplete() {
  let myLatlng = { lat: 35.681, lng: 139.767 };
  let map = new google.maps.Map(document.getElementById('map'), {
    center: myLatlng,         //地図の中心点
    zoom: 12,                 //ズームレベル
    mapTypeControl: false,    //地図タイプ選択(地図or航空写真)の無効化
    streetViewControl: false, //ストリートビュー切り替えの無効化
    fullscreenControl: false, //全画面表示の無効化
    //地図上でのカーソルの指定
    draggableCursor: "crosshair",
    draggingCursor: "move"
  });
  //マーカーの初期プロパティを指定
  let marker = new google.maps.Marker({
    position: myLatlng,
    map: map
  });

  // ここから検索窓に関する記述
  const input = document.getElementById("pac-input");
  const searchBox = new google.maps.places.SearchBox(input);

  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

  map.addListener("bounds_changed", () => {
    searchBox.setBounds(map.getBounds());
  });

  let markers = [];
  searchBox.addListener("places_changed", () => {
  // "place_chaged"イベントはAutoCompleteクラスのイベント.
    const places = searchBox.getPlaces();

    if (places.length == 0) {
      return;
    }

    markers.forEach((marker) => {
      marker.setMap(null);
    });
    markers = [];

    const bounds = new google.maps.LatLngBounds();
    // "LatLngBounds"クラスは境界を作るインスンタンスを作成。引数は左下、右上の座標。
    places.forEach((place) => {
      if (!place.geometry) {
        // "geometry"はplaceライブラリのメソッド。
        console.log("Returned place contains no geometry");
        return;
      }

      markers.push(
        new google.maps.Marker({
          map,
          title: place.name,
          position: place.geometry.location,
          // 検索によるマーカーは非表示
          visible: false,
        })
      );

      if (place.geometry.viewport) {
        bounds.union(place.geometry.viewport);
      } else {
        bounds.extend(place.geometry.location);
      }
    });
    map.fitBounds(bounds);
    // "fitBounds"メソッドはmapクラスのメソッド。指定した境界を見えやすい位置にビューポートを変更する。
  });
  // ここまで

  // クリックした位置にピンを立てる
  google.maps.event.addListener(map, 'click', (e) => {
    document.getElementById("map_lat").value = e.latLng.lat();
    document.getElementById("map_lng").value = e.latLng.lng();
    marker.setPosition(e.latLng);
  });
}
google.maps.event.addDomListener(window, 'load', initAutocomplete);

// EnterキーによるSubmitを防ぐ
document.onkeypress = enter;
function enter(){
  if( window.event.keyCode == 13 ){
    return false;
  }
}
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GoogleMAP_API_KEY'] %>&callback=initAutocomplete&libraries=places" defer></script>
