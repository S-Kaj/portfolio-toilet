<p id="notice"><%= notice %></p>
<section class="index-flame">
  <div class="overview">
    <div class="overview title">What's TOILExiT?</div>
    <hr>
    初めて訪れる土地で急に<br>
    <b>「トイレはどこ？」</b>と、<br>
    焦ったことはありませんか？
    <div class="line-space"></div>
    そんなピンチを助けてくれる<br>
    サービスがあったら良いなと思い、<br>
    このTOILExiTを制作しました。
    <div class="line-space"></div>
    いざという時のトイレ情報、<br>
    一緒に共有しませんか？
  </div>
</section>
<section class="page-flame">
  <p class="info-label orange">最近登録されたトイレ情報</p>
  <hr>
  <table class="page-control center">
    <thead>
      <tr>
        <th>登録年月</th>
        <th>トイレ名称</th>
        <th>利用可能時間</th>
      </tr>
    </thead>
    <tbody>
      <% @toilets.each do |toilet| %>
        <tr>
          <td><%= toilet.created_at.strftime("%Y年%-m月%-d日") %></td>
          <td>
            <% if user_signed_in? %>
              <%= link_to toilet.toilet_name, toilet %>
            <% else %>
              <%= toilet.toilet_name %>
            <% end %>
          </td>
          <td>
            <span>
              <% if toilet.open_time.strftime("%H:%M") == "00:00" && toilet.close_time.strftime("%H:%M") == "00:00" %>
                -
              <% else %>
                <%= toilet.open_time.strftime("%H:%M") %> - <%= toilet.close_time.strftime("%H:%M") %>
              <% end %>
            </span>
          </td>
        </tr>
      <% end %>
    </tbody>
  </table>
  <% unless user_signed_in? %>
    <p class="warning-messeage">※ユーザー登録をすると詳細情報が見られます！！</p>
    <p class="page-control center"><%= link_to '新規ユーザー登録', '/users/sign_up/', :class => 'btn-control orange' %></p>
  <% end %>
  <div class="line-space"></div>
  <hr>
  <div class="line-space"></div>
  <div class="info-label orange">トイレ情報マップ</div>
  <div class="line-space"></div>
  <input
  id="pac-input_index"
  class="controls"
  type="text"
  placeholder="場所を検索"
  />
  <div id='map_index'></div>
  <div class="line-space"></div>
  <% if user_signed_in? %>
    <p class="page-control center"><%= link_to 'トイレ情報の登録', '/toilets/new/', :class => 'btn-control orange' %></p>
  <% end %>
</section>

<!-- 以下、GoogleMap API関連 -->
<style>
#map_index {
  height: 400px;
  max-width: 600px;
  border-radius: 0.5rem;
  border: 3px solid #636363;
}

#pac-input_index {
  height: 30px;
  font-size: 1.1rem;
  text-align: center;
  border: 3px solid #fc9816;
}
</style>
<script>
function initAutocomplete() {
  let map = new google.maps.Map(document.getElementById('map_index'), {
    center: { lat: 35.681, lng: 139.767 },  //地図の中心点
    zoom: 12,                               //ズームレベル
    mapTypeControl: false,                  //地図タイプ選択(地図or航空写真)の無効化
    streetViewControl: false,               //ストリートビュー切り替えの無効化
    fullscreenControl: false                //全画面表示の無効化
  });
  // 複数マーカーの作成
  <% @toilets.each do |toilet| %>
  (function() {
    let marker = new google.maps.Marker({
      position: {lat: <%= toilet.latitude %>, lng: <%= toilet.longtitude %>},
      map: map
    });
    // マーカーをクリックした時に吹き出しを表示する
    let infoWindow = new google.maps.InfoWindow({
      content: '<%= link_to toilet.toilet_name, toilet, :class => 'balloon toilet-name' %>\
      <p class="balloon">利用可能時間:\
      <% if toilet.open_time.strftime("%H:%M") == "00:00" && toilet.close_time.strftime("%H:%M") == "00:00" %>\
        -\
      <% else %>\
        <%= toilet.open_time.strftime("%H:%M") %> - <%= toilet.close_time.strftime("%H:%M") %>\
      <% end %>\
      </p>'
    });
    marker.addListener('click', () => {
      infoWindow.open(map, marker);
    });
  })();
  <% end %>

  // ここから検索窓に関する記述
  const input = document.getElementById("pac-input_index");
  const searchBox = new google.maps.places.SearchBox(input);

  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

  map.addListener("bounds_changed", () => {
    searchBox.setBounds(map.getBounds());
  });

  let markers = [];
  searchBox.addListener("places_changed", () => {
  // "place_chaged"イベントはAutoCompleteクラスのイベント.
    const places = searchBox.getPlaces();

    if (places.length == 0) {
      return;
    }

    markers.forEach((marker) => {
      marker.setMap(null);
    });
    markers = [];

    const bounds = new google.maps.LatLngBounds();
    // "LatLngBounds"クラスは境界を作るインスンタンスを作成。引数は左下、右上の座標。
    places.forEach((place) => {
      if (!place.geometry) {
        ////"geometry"はplaceライブラリのメソッド。
        console.log("Returned place contains no geometry");
        return;
      }

      markers.push(
        new google.maps.Marker({
          map,
          title: place.name,
          position: place.geometry.location,
          // 検索によるマーカーは非表示
          visible: false,
        })
      );

      if (place.geometry.viewport) {
        bounds.union(place.geometry.viewport);
      } else {
        bounds.extend(place.geometry.location);
      }
    });
    map.fitBounds(bounds);
    // "fitBounds"メソッドはmapクラスのメソッド。指定した境界を見えやすい位置にビューポートを変更する。
  });
  // ここまで
}
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GoogleMAP_API_KEY'] %>&callback=initAutocomplete&libraries=places" defer></script>
